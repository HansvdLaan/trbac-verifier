/*******************************************************************************
 * Copyright (c) 2010-2015, Zoltan Ujhelyi, Gabor Szarnyas
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-v20.html.
 * 
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
package com.vanderhighway.trbac.verifier

import "https://vanderhighway.com/trbac/2020"
import "http://www.eclipse.org/emf/2002/Ecore"
import java ^java.util.Set
import java ^java.util.HashSet
//import java ^com.vanderhighway.trbac.verifier.aggregator

// Policy
pattern policyP(policy: Policy) {
    Policy(policy);
}

// Policy
pattern sessionP(session: Session) {
    Session(session);
}

// Example Constraint - All Role Names
pattern roleName(role: Role, name : java String) {
    Role.name(role,name);
}

// ----- Utility Patterns -----

pattern allJuniors(senior: Role, junior: Role) {
	Role.juniors(senior, junior);
} or {
	Role.juniors(senior, refjunior);
	find allJuniors(refjunior, junior);
}

pattern allJuniorsIncludingSelf(senior: Role, roleP: Role) {
	senior == roleP;
} or {
	find allJuniors(senior, roleP);
}

pattern allSubdemarcations(supdemarcation: Demarcation, subdemarcation: Demarcation) {
	Demarcation.subdemarcations(supdemarcation, subdemarcation);
} or {
	Demarcation.subdemarcations(supdemarcation, refsubdemarcation);
	find allSubdemarcations(refsubdemarcation, subdemarcation);
}

pattern allSubDemarcationsIncludingSelf(supdemarcation: Demarcation, demarcationP: Demarcation) {
	supdemarcation == demarcationP;
} or {
	find allSubdemarcations(supdemarcation, demarcationP);
}

// ----------------------------


// ----- Access Relation -----

pattern accessRelation(user: User, permission: Permission) {
    User.UR(user,role);
    Role.RD(role, demarcation);
   	Demarcation.DP(demarcation, permission);
}

pattern accessRelation2(user: User, permission: Permission) {
    User.UR(user,role);
    find allJuniorsIncludingSelf(role, roleP);
    Role.RD(roleP, demarcation);
    find allSubDemarcationsIncludingSelf(demarcation, demarcationP);
   	Demarcation.DP(demarcationP, permission);
}

// ---------------------------

// ----- Example Cardinality Constraints -----

pattern userShouldHaveARole(user: User) {
    neg User.UR(user, _);
}
pattern roleShouldHaveADemarcation(role: Role) {
    neg Role.RD(role, _);
}
pattern demarcationShouldHaveAPermission(dem: Demarcation) {
    neg Demarcation.DP(dem, _);
}

pattern onlyOneDirector(role:Role) {
	Role.name(role, "Director");
	n == count Role.RU(role, _);
	check(n >= 2);
}

pattern onlyOneRnDManager(role:Role) {
	Role.name(role, "RnD_Manager");
	n == count Role.RU(role, _);
	check(n >= 2);
}

pattern onlyOneOperationsManager(role:Role) {
	Role.name(role, "Operations_Manager");
	n == count Role.RU(role, _);
	check(n >= 2);
}

// ------------------------------------------


// ----- Example Static SoD constraints -----

pattern SoDEmployeeAndContractor(userE: User, userC: User, employee : Role, contractor : Role) {
    Role.name(employee, "Employee");
    Role.name(contractor, "Contractor");
   	Role.RU(employee, userE);
   	Role.RU(contractor, userC);
    userE==userC;
}

pattern SoDEmployeeAndVisitor(userE: User, userV: User, employee : Role, visitor : Role) {
    Role.name(employee, "Employee");
    Role.name(visitor, "Visitor");
   	Role.RU(employee, userE);
   	Role.RU(visitor, userV);
    userE==userV;
}

// ------------------------------------------


// ----- Example Prerequiste Constraints -----

pattern PrerequisiteEverybodyHasAccessToLobby(user: User) {
	Permission.name(pLobby,"Lobby");
    neg find accessRelation(user, pLobby);
}

pattern PrerequisiteVaultImpliesOpenOffice(user: User) {
	Permission.name(pVault,"Vault");
	find accessRelation(user, pVault);
	Permission.name(pOpenOffice,"OpenOffice");
    neg find accessRelation(user, pOpenOffice);
}

// ------------------------------------------


// ---- Constrains for Transformations ----
pattern userShouldHaveASession(user: User) {
    neg User.US(user, _);
}

//pattern sessionShouldHaveAUser(session: User) {
//    neg User.US(_,session);
//}

pattern SessionOfUser(user: User, session: Session) {
    User.US(user, session);
}

pattern RangeP(daySchedule: DaySchedule, group: TimeRangeGroup, timeRange: TimeRange, out starttime: java Integer, out endtime: java Integer) {
	TimeRangeGroup(group);
	TimeRangeGroup.timeRanges(group,timeRange);
	DaySchedule.timeRanges(daySchedule, timeRange);
	TimeRange.start(timeRange,starttime);
	TimeRange.end(timeRange,endtime);
}
//
//
//pattern TimeRange(in weekday: DayOfWeekSchedule, out wsr: DayScheduleTimeRange, in yearday: DayOfMonthSchedule, 
//	out ysr: DayScheduleTimeRange, out starttime: java Integer, out endtime: java Integer) {
//	DayOfWeekSchedule(weekday);
//	DayOfMonthSchedule(yearday);
//	DayOfWeekSchedule.scheduleranges(weekday, wsr);
//	DayOfMonthSchedule.scheduleranges(yearday, ysr);
//	DayScheduleTimeRange.start(wsr, wsr_start);
//	DayScheduleTimeRange.start(ysr, ysr_start);
//	DayScheduleTimeRange.end(wsr, wsr_end);
//	DayScheduleTimeRange.end(ysr, ysr_end);
//
//	check( (wsr_start <= ysr_start && ysr_start <= wsr_end) ||  (ysr_start <= wsr_start && wsr_start <= ysr_end));
//
//	starttime == eval(Math.max(wsr_start, ysr_start));
//	endtime == eval(Math.min(wsr_end, ysr_end));
//}
//
//pattern TimeRangeGroup(in weekday: DayOfWeekSchedule, in yearday: DayOfMonthSchedule, 
//	out starttime: java Integer, out endtime: java Integer, group: TimeRangeGroup
//) {
//	find TimeRange(weekday, wsr, yearday, _, starttime, endtime);
//	DayScheduleTimeRange.timeRange(wsr, weekrange);
//	TimeRangeGroup.ranges(group, weekrange);
//} or {
//	find TimeRange(weekday, _, yearday, ysr, starttime, endtime);
//	DayScheduleTimeRange.timeRange(ysr, yearrange);
//	TimeRangeGroup.ranges(group, yearrange);
//}
//
//pattern TimeRangeGroupsDistinct(in weekday: DayOfWeekSchedule, in yearday: DayOfMonthSchedule, 
//	out starttime: java Integer, out endtime: java Integer, groups: java Set) {
//	find TimeRange(weekday, wsr, yearday, ysr, starttime, endtime);
//	groups == distinct find TimeRangeGroup(weekday, yearday, starttime, endtime, #group);
//}
//
//pattern DistinctGroups(groups: java Set) {
//	find TimeRangeGroupsDistinct(_, _, _, _, groups);
//}
//
//pattern TimeRangeGroupExceptAlways(in weekday: DayOfWeekSchedule, in yearday: DayOfMonthSchedule, 
//	out starttime: java Integer, out endtime: java Integer, group: TimeRangeGroup
//) {
//	find TimeRangeGroup(weekday,yearday,starttime,endtime,group);
//	TimeRangeGroup.name(group, name); 
//	check(name != "Always");
//}
//
//pattern myPat (n: sumnum, number: java Integer) {
//	sumnum(n);
//	sumnum.num(n,number);
//}
//
//
//pattern SumNumP(mycount: java Integer) {
//	mycount == sum find myPat(_a,#x);
//}
//
//pattern SumNumP2(mycount: java Integer) {
//	mycount == mysum find myPat(_a,#x);
//}
//
//pattern SetTestQuery(myresult: java Set) {
//	myresult == eval(new HashSet<Integer>());
//}
//
//pattern SumNumP4(myresult: java Set) {
//	myresult == distinct find myPat(_a,#x);
//}


//pattern starttime(day: Day, starttime: java Integer) {
//	Day.ranges(day, timeRange);
//	Range.starttime(timeRange, starttime);
//}
//
//pattern endtime(day: Day, endtime: java Integer) {
//	Day.ranges(day, timeRange);
//	Range.endtime(timeRange, endtime);
//}
//
//pattern bound(day: Day, bound: java Integer) {
//	find starttime(day, bound);
//} or {
//	find endtime(day, bound);
//}

//private pattern findValueInBetween(lr: Range, ur: Range){
//	Range.starttime(_,z);
//	Range.starttime(lr, starttime);
//	Range.endtime(ur, endtime);
//}

//private pattern starttimes(in day: Day, out starttime: java Integer) {
//
//}

//
//pattern InheritedDemarcation(role: Role, demarcation: Demarcation) {
//    Role.RDH(role, demarcation);
//}
//
//pattern MissingInheritedDemarcation(roleJunior: Role, roleSenior: Role, demarcation: Demarcation) {
//	find MissingDirectInheritedDemarcation(roleJunior, roleSenior, demarcation);
//	} or {
//	find MissingIndirectInheritedDemarcation(roleJunior, roleSenior, demarcation);
//}
//
//pattern MissingDirectInheritedDemarcation(roleJunior: Role, roleSenior: Role, demarcation: Demarcation) {
//	Role.juniors(roleSenior, roleJunior);
//	Role.RD(roleJunior,demarcation);
//	neg Role.RDH(roleSenior, demarcation);
//}
//
//pattern MissingIndirectInheritedDemarcation(roleJunior: Role, roleSenior: Role, demarcation: Demarcation) {
//	Role.juniors(roleSenior, roleJunior);
//	Role.RDH(roleJunior, demarcation);
//	neg Role.RDH(roleSenior,demarcation);
//}
// ----------------------------------------


//pattern ScheduleRangeP(timeRange: ScheduleRange, out starttime: java Integer, out endtime: java Integer) {
//	ScheduleRange(timeRange);
//	ScheduleRange.start(timeRange,starttime);
//	ScheduleRange.end(timeRange,endtime);
//}
//
//pattern emapPattern(K : EString, V : EString) {
//    Policy(P);
//    Policy.map(P, Map);
//    EStringToEStringMap.key(Map, K);
//    EStringToEStringMap.value(Map, V);
//}
