//*******************************************************************************
// * Policy Queries
// *******************************************************************************

package com.vanderhighway.grrbac.patterns

import "https://vanderhighway.com/grrbac/2020"
import "http://www.eclipse.org/emf/2002/Ecore"
import java ^com.vanderhighway.grrbac.aggregators.distinct
import java ^com.vanderhighway.grrbac.aggregators.Scenario

// ----- Utility Patterns -----

pattern USD(in user: User, scenario: java Scenario, demarcation:Demarcation) {
	User.UR(user, role);
    find RHSDH(role, scenario, demarcation);
}

pattern USP(in user: User, scenario: java Scenario, permission:Permission) {
	User.UR(user,role);
    find RSP(role, scenario, permission);
}

pattern USO(in user: User, scenario: java Scenario, object:SACSObject) {
    find USP(user, scenario, permission);
    Permission.PO(permission, object);
}

pattern RSP(in role: Role, scenario: java Scenario, permission:Permission) {
	find RHSDH(role, scenario, demarcation);
    Demarcation.DP(demarcation,permission);
}

pattern RSD(in role: Role, scenario: java Scenario, demarcation: Demarcation) {
	find Scenarios(scenario);
	find connectedByTemporalGrantRule(role, demarcation);
	find GrantPriority(scenario, role, demarcation, _);
	find RevokePriority(scenario, role, demarcation, _);
	maxGrantPriority == max find GrantPriority(scenario, role, demarcation, #p);
	maxRevokePriority == max find RevokePriority(scenario, role, demarcation, #p2);
	check(maxGrantPriority > maxRevokePriority);
} or {
	find Scenarios(scenario);
	find connectedByTemporalGrantRule(role, demarcation);
	find GrantPriority(scenario, role, demarcation, _);
	neg find RevokePriority(scenario, role, demarcation, _);
}

pattern RHSDH(in role: Role, scenario: java Scenario, demarcation: Demarcation) {
	Role.juniors*(role, roleP);
	find RSD(roleP, scenario, demarcationP);
	Demarcation.subdemarcations*(demarcationP, demarcation);
} 

pattern connectedByTemporalGrantRule(in role: Role, demarcation: Demarcation) {
	TemporalGrantRule.role(rule, role);
	TemporalGrantRule.demarcation(rule, demarcation);
}

pattern GrantPriority(in scenario: java Scenario, in role: Role, demarcation: Demarcation, out priority: java Integer) {
	find ScenarioTemporalContext(scenario,context);
	TemporalContext.temporalGrantRules(context, rule);
	TemporalGrantRule.isGrant(rule, true);
	Role.constrainedBy(role, rule);
	Demarcation.constrainedBy(demarcation, rule);
	TemporalGrantRule.priority(rule, priority);
}

pattern RevokePriority(in scenario: java Scenario, in role: Role, demarcation: Demarcation, out priority: java Integer) {
	find ScenarioTemporalContext(scenario,context);
	TemporalContext.temporalGrantRules(context, rule);
	TemporalGrantRule.isGrant(rule, false);
	Role.constrainedBy(role, rule);
	Demarcation.constrainedBy(demarcation, rule);
	TemporalGrantRule.priority(rule, priority);
}
