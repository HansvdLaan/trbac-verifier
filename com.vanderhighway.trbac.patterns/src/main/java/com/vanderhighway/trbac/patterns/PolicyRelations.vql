//*******************************************************************************
// * Policy Queries
// *******************************************************************************

package com.vanderhighway.trbac.patterns

import "https://vanderhighway.com/trbac/2020"
import "http://www.eclipse.org/emf/2002/Ecore"
import java ^com.vanderhighway.trbac.aggregators.distinct
import java ^com.vanderhighway.trbac.aggregators.Scenario
// ----- Utility Patterns -----

pattern USD(in user: User, scenario: java Scenario, demarcation:Demarcation) {
	User.UR(user, role);
	Role.juniors*(role, roleP);
    find Scenarios(scenario);
    find RSD(roleP, scenario, demarcation);
}

pattern USP(in user: User, scenario: java Scenario, permission:Permission) {
	User.UR(user,role);
    Role.juniors*(role, roleP);
    find RSP(roleP, scenario, permission);
}

pattern USO(in user: User, scenario: java Scenario, object:XObject) {
    find USP(user, scenario, permission);
    Permission.PO(permission, object);
}

pattern RSP(in role: Role, scenario: java Scenario, permission:Permission) {
	find RSD(role, scenario, demarcation);
    Demarcation.subdemarcations*(demarcation, demarcationP);
    Demarcation.DP(demarcationP,permission);
}

pattern RSD(in role: Role, scenario: java Scenario, demarcation: Demarcation) {
	find Scenarios(scenario);
	find connectedByTemporalGrantRule(role, demarcation);
	find EnabledPriority(scenario, role, demarcation, _);
	find DisabledPriority(scenario, role, demarcation, _);
	maxEnabledPriority == max find EnabledPriority(scenario, role, demarcation, #p);
	maxDisabledPriority == max find DisabledPriority(scenario, role, demarcation, #p2);
	check(maxEnabledPriority > maxDisabledPriority);
} or {
	find Scenarios(scenario);
	find connectedByTemporalGrantRule(role, demarcation);
	find EnabledPriority(scenario, role, demarcation, _);
	neg find DisabledPriority(scenario, role, demarcation, _);
}

// Used to detect newly added time ranges
pattern TimeRangeP(daySchedule: DaySchedule, context: TemporalContext, instance: TimeRange, out starttime: java Integer, out endtime: java Integer) {
	TemporalContext(context);
	TemporalContext.instances(context,instance);
	DaySchedule.timeRanges(daySchedule, instance);
	TimeRange.start(instance,starttime);
	TimeRange.end(instance,endtime);
}

// Used to detect newly created day of the week time
pattern DayOfWeekInstanceP(daySchedule: DayOfWeekSchedule, instance: DayScheduleTimeRange) {
	DaySchedule.instances(daySchedule, instance);
}

// Used to detect newly created day of the week time
pattern DayOfMonthInstanceP(daySchedule: DayOfMonthSchedule, instance: DayScheduleTimeRange) {
	DaySchedule.instances(daySchedule, instance);
}

// Used to detect newly created day of the week time
pattern DayOfWeekMonthInstanceP(daySchedule: DayOfWeekMonthSchedule, instance: DayScheduleTimeRange) {
	DaySchedule.instances(daySchedule, instance);
}

// Used to detect newly created day of the week  month time ranges
pattern DayScheduleTimeRangeP(daySchedule: DaySchedule, instance: DayScheduleTimeRange, out starttime: java Integer, out endtime: java Integer) {
	DaySchedule.instances(daySchedule, instance);
	TimeRange.start(instance,starttime);
	TimeRange.end(instance,endtime);
}


pattern DayOfWeekAndMonthCombinedScheduleInstance(dayOfWeekSchedule: DayOfWeekSchedule, dayOfMonthSchedule: DayOfMonthSchedule,
	dayOfWeekAndMonthSchedule: DayOfWeekMonthSchedule, wstr: DayScheduleTimeRange,  mstr: DayScheduleTimeRange,
	out starttime: java Integer, out endtime: java Integer) {
	DayOfWeekMonthSchedule.dayOfWeekSchedule(dayOfWeekAndMonthSchedule, dayOfWeekSchedule);
	DayOfWeekMonthSchedule.dayOfMonthSchedule(dayOfWeekAndMonthSchedule, dayOfMonthSchedule);
	DayOfWeekSchedule.instances(dayOfWeekSchedule, wstr);
	DayOfMonthSchedule.instances(dayOfMonthSchedule, mstr);
	DayScheduleTimeRange.start(wstr, wstr_start);
	DayScheduleTimeRange.start(mstr, mstr_start);
	DayScheduleTimeRange.end(wstr, wstr_end);
	DayScheduleTimeRange.end(mstr, mstr_end);

	check( (wstr_start <= mstr_start && mstr_start <= wstr_end) ||  (mstr_start <= wstr_start && wstr_start <= mstr_end));

	starttime == eval(Math.max(wstr_start, mstr_start));
	endtime == eval(Math.min(wstr_end, mstr_end));
}

pattern DayOfWeekAndMonthAllCombinedScheduleInstance(dayOfWeekSchedule: DayOfWeekSchedule, dayOfMonthSchedule: DayOfMonthSchedule,
	dayOfWeekAndMonthSchedule: DayOfWeekMonthSchedule, wstr: DayScheduleTimeRange,  mstr: DayScheduleTimeRange, wmstr: DayScheduleTimeRange,
	out starttime: java Integer, out endtime: java Integer) {

	find DayOfWeekAndMonthCombinedScheduleInstance(dayOfWeekSchedule, dayOfMonthSchedule, dayOfWeekAndMonthSchedule, wstr, mstr, wmc_start, wmc_end);
	DayOfWeekMonthSchedule.instances(dayOfWeekAndMonthSchedule, wmstr);

	DayScheduleTimeRange.start(wmstr, wmstr_start);
	DayScheduleTimeRange.end(wmstr, wmstr_end);

	check( (wmstr_start <= wmc_start && wmc_start <= wmstr_end) ||  (wmc_start <= wmstr_start && wmstr_start <= wmc_end));

	starttime == eval(Math.max(wmstr_start, wmc_start));
	endtime == eval(Math.min(wmstr_end, wmc_end));
}


pattern DateScheduleInstance(in dayOfYearSchedule: DayOfYearSchedule, in wstr: DayScheduleTimeRange,
	in mstr: DayScheduleTimeRange, in wmstr: DayScheduleTimeRange, in ystr: DayScheduleTimeRange,
	out starttime: java Integer, out endtime: java Integer
) {
	DayOfYearSchedule.dayOfWeekMonthSchedule(dayOfYearSchedule, dayOfWeekAndMonthSchedule);
	DayOfWeekMonthSchedule.dayOfWeekSchedule(dayOfWeekAndMonthSchedule, dayOfWeekSchedule);
	DayOfWeekMonthSchedule.dayOfMonthSchedule(dayOfWeekAndMonthSchedule, dayOfMonthSchedule);

	find DayOfWeekAndMonthAllCombinedScheduleInstance(dayOfWeekSchedule, dayOfMonthSchedule, dayOfWeekAndMonthSchedule, wstr, mstr, wmstr, wmac_start, wmac_end);

	DayOfYearSchedule.instances(dayOfYearSchedule, ystr);
	DayScheduleTimeRange.start(ystr, ystr_start);
	DayScheduleTimeRange.end(ystr, ystr_end);

	check( (wmac_start <= ystr_start && ystr_start <= wmac_end) ||  (ystr_start <= wmac_start && wmac_start <= ystr_end) );

	starttime == eval(Math.max(wmac_start, ystr_start));
	endtime == eval(Math.min(wmac_end, ystr_end));
}

pattern TemporalContext_DateScheduleTimeRangeInstance(context: TemporalContext, in daySchedule: DaySchedule,
	out starttime: java Integer, out endtime: java Integer)
{
	find DateScheduleInstance(daySchedule, wstr, _, _, _, starttime, endtime);
	DayScheduleTimeRange.temporalContextTimeRanges(wstr, tr);
	TemporalContext.instances(context, tr);
} or {
	find DateScheduleInstance(daySchedule, _, mstr, _, _, starttime, endtime);
	DayScheduleTimeRange.temporalContextTimeRanges(mstr, tr);
	TemporalContext.instances(context, tr);
} or {
	find DateScheduleInstance(daySchedule, _, _, wmstr, _, starttime, endtime);
	DayScheduleTimeRange.temporalContextTimeRanges(wmstr, tr);
	TemporalContext.instances(context, tr);
} or {
	find DateScheduleInstance(daySchedule, _, _, _, ystr, starttime, endtime);
	DayScheduleTimeRange.temporalContextTimeRanges(ystr, tr);
	TemporalContext.instances(context, tr);
}

pattern TemporalContext_DayOfWeekAndMonthAllCombinedScheduleInstance(context: TemporalContext, in daySchedule: DaySchedule,
	out starttime: java Integer, out endtime: java Integer)
{
    find DayOfWeekAndMonthAllCombinedScheduleInstance(_, _, daySchedule, wstr, _, _, starttime, endtime);
	DayScheduleTimeRange.temporalContextTimeRanges(wstr, tr);
	TemporalContext.instances(context, tr);
} or {
	find DayOfWeekAndMonthAllCombinedScheduleInstance(_, _, daySchedule, _, mstr, _, starttime, endtime);
	DayScheduleTimeRange.temporalContextTimeRanges(mstr, tr);
	TemporalContext.instances(context, tr);
} or {
	find DayOfWeekAndMonthAllCombinedScheduleInstance(_, _, daySchedule, _, _, wmstr, starttime, endtime);
	DayScheduleTimeRange.temporalContextTimeRanges(wmstr, tr);
	TemporalContext.instances(context, tr);
}

pattern DateScheduleInstance_TemporalContext(in daySchedule: DaySchedule, out starttime: java Integer,
	out endtime: java Integer, context: TemporalContext) {
		find TemporalContext_DateScheduleTimeRangeInstance(context, daySchedule,starttime,endtime);
}

pattern DayOfWeekAndMonthAllCombinedScheduleInstance_TemporalContext(in daySchedule: DaySchedule, out starttime: java Integer,
	out endtime: java Integer, context: TemporalContext) {
		find TemporalContext_DayOfWeekAndMonthAllCombinedScheduleInstance(context, daySchedule,starttime,endtime);
}

pattern DateScheduleInstance_To_Scenario(in daySchedule: DaySchedule, out starttime: java Integer,
	out endtime: java Integer, scenario: java Scenario) {
	DayOfYearSchedule(daySchedule);
	find DateScheduleInstance(daySchedule, _, _, _, _, starttime, endtime);
	scenario == distinct find DateScheduleInstance_TemporalContext(daySchedule, starttime, endtime, #context);
}
pattern DayOfWeekAndMonthAllCombinedScheduleInstance_To_Scenario(in daySchedule: DaySchedule, out starttime: java Integer,
	out endtime: java Integer, scenario: java Scenario) {
	DayOfWeekMonthSchedule(daySchedule);
	find DayOfWeekAndMonthAllCombinedScheduleInstance(_, _, daySchedule, _, _, _, starttime, endtime);
	scenario == distinct find DayOfWeekAndMonthAllCombinedScheduleInstance_TemporalContext(daySchedule, starttime, endtime, #context);
}

pattern Scenarios(out scenario: java Scenario) {
	find DateScheduleInstance_To_Scenario(_, _, _, scenario);
} or {
	find DayOfWeekAndMonthAllCombinedScheduleInstance_To_Scenario(_, _, _, scenario);
}

//pattern Scenarios(scenario: java Scenario) {
//	java Scenario(scenario);
//}

pattern ScenarioTemporalContext(in scenario: java Scenario, out context: TemporalContext) {
	find DateScheduleInstance_To_Scenario(ys, start, end, scenario);
	find DateScheduleInstance_TemporalContext(ys, start, end, context);
} or {
	find DayOfWeekAndMonthAllCombinedScheduleInstance_To_Scenario(ys, start, end, scenario);
	find DayOfWeekAndMonthAllCombinedScheduleInstance_TemporalContext(ys, start, end, context);
}

//pattern ScenarioTemporalContext(scenario: java Scenario, context: TemporalContext) {
//	java Scenario.temporalContexts(scenario, context);
//}

pattern connectedByTemporalGrantRule(in role: Role, demarcation: Demarcation) {
	TemporalGrantRule.role(rule, role);
	TemporalGrantRule.demarcation(rule, demarcation);
}

pattern EnabledPriority(in scenario: java Scenario, in role: Role, demarcation: Demarcation, out priority: java Integer) {
	find ScenarioTemporalContext(scenario,context);
	TemporalContext.temporalGrantRules(context, rule);
	TemporalGrantRule.enable(rule, enabled);
	check(enabled);
	Role.constrainedBy(role, rule);
	Demarcation.constrainedBy(demarcation, rule);
	TemporalGrantRule.priority(rule, priority);
}

pattern DisabledPriority(in scenario: java Scenario, in role: Role, demarcation: Demarcation, out priority: java Integer) {
	find ScenarioTemporalContext(scenario,context);
	TemporalContext.temporalGrantRules(context, rule);
	TemporalGrantRule.enable(rule, enabled);
	check(!enabled);
	Role.constrainedBy(role, rule);
	Demarcation.constrainedBy(demarcation, rule);
	TemporalGrantRule.priority(rule, priority);
}

pattern StatusPriority(in scenario: java Scenario, in zone: SecurityZone, out status: java Integer, out priority: java Integer) {
	find ScenarioTemporalContext(scenario,context);
	TemporalContext.temporalAuthenticationRules(context, rule);
	TemporalAuthenticationRule.status(rule, status);
	SecurityZone.constrainedBy(zone, rule);
	TemporalAuthenticationRule.priority(rule, priority);
}
pattern LockedPriority(in scenario: java Scenario, in zone: SecurityZone, out priority: java Integer) {
	find StatusPriority(scenario, zone, 2, priority);
} or {
	find Scenarios(scenario);
	SecurityZone(zone);
	priority == -1;
}

pattern ProtectedPriority(in scenario: java Scenario, in zone: SecurityZone, out priority: java Integer) {
	find StatusPriority(scenario, zone, 1, priority);
} or {
	find Scenarios(scenario);
	SecurityZone(zone);
	priority == -1;
}

pattern UnlockedPriority(in scenario: java Scenario, in zone: SecurityZone, out priority: java Integer) {
	find StatusPriority(scenario, zone, 0, priority);
} or {
	find Scenarios(scenario);
	SecurityZone(zone);
	priority == -1;
}

pattern SecurityZoneAccessStatus(in scenario: java Scenario, in zone: SecurityZone, out status: java Integer) {
	find Scenarios(scenario);
	SecurityZone(zone);
	maxLockedPriority == max find LockedPriority(scenario,zone, #p1);
	maxProtectedPriority == max find ProtectedPriority(scenario,zone,#p2);
	maxUnlockedPriority == max find UnlockedPriority(scenario,zone,#p3);
	status == eval(MyQueryUtil.determineAuthenticationStatus(maxLockedPriority, maxProtectedPriority, maxUnlockedPriority));
}

pattern SecurityZoneLeavable(user: User, scenario: java Scenario, zone: SecurityZone) {
	SecurityZone.public(zone, true);
	User(user);
	find Scenarios(scenario);
} or {
	SecurityZone.reachable(zone,next);
	find SecurityZoneAccessible(user, scenario, next);
	find SecurityZoneLeavable(user, scenario, next);
}

pattern SecurityZoneAccessible(user: User, scenario: java Scenario, zone: SecurityZone) {
	SecurityZone.public(zone, true);
	find SecurityZoneAccessStatus(scenario, zone, 0);
	User(user);
} or {
	find USO(user, scenario, zone);
	SecurityZone.public(zone, true);
	find SecurityZoneAccessStatus(scenario, zone, 1);
} or {
	find SecurityZoneAccessible(user, scenario, prev);
	find SecurityZoneAccessibleIntermediate1(scenario, prev, zone);
} or {
  	find SecurityZoneAccessible(user, scenario, prev);
  	find SecurityZoneAccessibleIntermediate2(user, scenario, prev, zone);
}
 
pattern SecurityZoneAccessAllowed(scenario: java Scenario, zone: SecurityZone) {
	find SecurityZoneAccessStatus(scenario, zone, status);
	check(status == 1 || status == 0);
}

pattern SecurityZoneAccessibleIntermediate1(scenario: java Scenario, prev: SecurityZone, zone: SecurityZone) {
	find SecurityZoneAccessStatus(scenario, zone, 0);
	SecurityZone.reachable(prev,zone);
}

pattern SecurityZoneAccessibleIntermediate2(user: User, scenario: java Scenario, prev: SecurityZone, zone: SecurityZone) {
	SecurityZone.reachable(prev,zone);
	find SecurityZoneAccessStatus(scenario, zone, 1);
	find USO(user, scenario, zone);
}